#!/usr/bin/env ruby

# sync output
$stdout.sync = true

# TODO: Downloading the tar is cheap, it's the build that takes ages
# therefore download the tar to compare the version number.  If the cached built
# artifacts are the same version, restore from the cache.  Otherwise,
# delete the old cache then rebuild and cache the new version.

BUILD_DIR = ARGV[0]
CACHE_DIR = ARGV[1]
ARCHIVE_NAME = "freetds-1.1.17"
INSTALL_DIR = "#{BUILD_DIR}/vendor/freetds"

puts "-----> FreeTDS building in #{BUILD_DIR}"
puts `mkdir -p #{INSTALL_DIR}`

puts "-----> Fetching & Extracting FreeTDS"
puts `curl ftp://ftp.freetds.org/pub/freetds/stable/#{ARCHIVE_NAME}.tar.gz -o - | tar -xz -C #{BUILD_DIR} -f -`

TARGET_DIR = `ls #{BUILD_DIR} | grep 'freetds-[0-9]\.'`.chomp
puts "installing #{TARGET_DIR}"

puts "-----> Configuring FreeTDS"
puts `cd #{BUILD_DIR}/#{TARGET_DIR} && ./configure --prefix=#{INSTALL_DIR} --with-libiconv-prefix=DIR --with-openssl=DIR --with-tdsver=7.3`

puts "-----> Building FreeTDS"
puts `cd #{BUILD_DIR}/#{TARGET_DIR} && make`

puts "-----> Installing FreeTDS into #{INSTALL_DIR}"
puts `cd #{BUILD_DIR}/#{TARGET_DIR} && make install`

puts "-----> Removing FreeTDS install files"
puts `rm -rf #{BUILD_DIR}/#{TARGET_DIR}`


# TODO: Understand why this step is necessary
puts "-----> Copying FreeTDS into /app/vendor/freetds"
puts `cp -r #{BUILD_DIR}/vendor/freetds /app/vendor/freetds`

puts "-----> Writing FreeTDS configuration for subsequent buildpack"
# TODO: Understand why this is required
File.open("export", "a") do |file|
  file.write("export FREETDS_DIR=/app/vendor/freetds")
end
